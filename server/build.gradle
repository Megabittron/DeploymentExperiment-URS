// Server side build.gradle
// Builds the server-side of the project

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'server.database.Server'

dependencies {
    compile 'com.sparkjava:spark-core:2.6.0'
    compile 'com.sparkjava:spark-debug-tools:0.5'
    compile 'org.slf4j:slf4j-simple:1.7.26'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'org.mongodb:mongodb-driver:3.12.8'
    compile 'com.google.apis:google-api-services-oauth2:v2-rev20190313-1.28.0'
    compile 'org.json:json:20180813'

    testCompile 'junit:junit:4.12'
}

processResources {
    filesMatching('config.properties') {
        expand([RESULT: System.getenv("CLIENT_SECRET"),
                PASS: System.getenv("JKS_PASS")])
    }
}

distributions {
    main {
        contents {
            // Put the client artifacts (HTML, CSS, and JS generated
            // by Angular) in the `lib/client/public` directory. This
            // plus putting `lib/client` in the classpath (below in this
            // file) and setting `public` as the place where static files
            // will be served from by Spark (in `Server.java`) allows
            // the generated static files to be successfully served from
            // Spark when run from the gradle generated startup script
            // in the gradle generated tarball.
            into('lib/client/public') {
                from { project(':client').build.outputs.files }
                fileMode = 0755
            }
        }
    }
}

//Only server tests
task runServerTests {
    group = "application"
}
runServerTests.dependsOn test

//Both karma and junit tests
task runAllTests {
    group = "application"
    description = "Runs the server as a JVM application after testing both it and the client"
}

runAllTests.dependsOn check

check.dependsOn(":client:runClientTests")

// Adds the `lib/client` directory to the classpath that is built
// in the startup script that gradle builds for us. It appears that
// whatever we put here has `lib/` prepended before it, which is kinda
// annoying for the static web artifacts, but this does work.
startScripts {
    classpath += files('client')
}
